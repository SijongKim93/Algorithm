문제 설명  
1937년 Collatz란 사람에 의해 제기된 이 추측은, 주어진 수가 1이 될 때까지 다음 작업을 반복하면, 모든 수를 1로 만들 수 있다는 추측입니다. 작업은 다음과 같습니다.

1-1. 입력된 수가 짝수라면 2로 나눕니다.  
1-2. 입력된 수가 홀수라면 3을 곱하고 1을 더합니다.  
2\. 결과로 나온 수에 같은 작업을 1이 될 때까지 반복합니다.  
예를 들어, 주어진 수가 6이라면 6 → 3 → 10 → 5 → 16 → 8 → 4 → 2 → 1 이 되어 총 8번 만에 1이 됩니다. 위 작업을 몇 번이나 반복해야 하는지 반환하는 함수, solution을 완성해 주세요. 단, 주어진 수가 1인 경우에는 0을, 작업을 500번 반복할 때까지 1이 되지 않는다면 –1을 반환해 주세요.

```
func solution(_ num:Int) -> Int {
    var count = 0
    var number = num

    while number != 1 {
        if number % 2 == 0 {
            number /= 2
        } else {
            number = number * 3 + 1
        }

        count += 1

        if count == 500 {
            return -1
        }
    }

    return count
}
```

먼저 작업의 수를 판단하는 `count` 변수와 주어진 변수를 담는 `number`를 선언한 후  
while 문을 통해 1이 될때까지 계산하는 반복문을 작성한다.

`number`가 짝수일때 , 홀수일때 주어진 문제와 같이 계산할 수 있도록 식을 작성해야한다.

```
if number % 2 == 0 {
    numer /= 2
   } else {
           number = number * 3 + 1
   }
```

작업이 수행될 때 마다 count 변수 내 작업 횟수를 담을 수 있도록

```
count += 1 
```

을 넣어주면 반복문이 실행될 때 마다 1씩 더해져 그 횟수를 구할 수 있다.

마지막으로 500번이 실행됐는데 1이 되지 않으면 -1 을 반환하는 조건문을 작성하면 해당 문제는 풀린다.

```
if count == 500 {
    return -1
}
```
